Index: src/br/com/lnohara/mod30/dao/ClienteDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package br.com.lnohara.mod30.dao;\n\nimport br.com.lnohara.mod30.dao.generic.GenericDAO;\nimport br.com.lnohara.mod30.dao.interfaces.IClienteDAO;\nimport br.com.lnohara.mod30.domain.Cliente;\n\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\n\npublic class ClienteDAO extends GenericDAO<Cliente, Long> implements IClienteDAO {\n\n    public ClienteDAO() {\n        super();\n    }\n\n    @Override\n    public Class<Cliente> getTipoClasse() {\n        return Cliente.class;\n    }\n\n    @Override\n    public void atualiarDados(Cliente entity, Cliente entityCadastrado) {\n        entityCadastrado.setCidade(entity.getCidade());\n        entityCadastrado.setCpf(entity.getCpf());\n        entityCadastrado.setEnd(entity.getEnd());\n        entityCadastrado.setEstado(entity.getEstado());\n        entityCadastrado.setNome(entity.getNome());\n        entityCadastrado.setNumero(entity.getNumero());\n        entityCadastrado.setTel(entity.getTel());\n\n    }\n\n    @Override\n    protected String getQueryInsercao() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"INSERT INTO TB_CLIENTE \");\n        sb.append(\"(ID, NOME, CPF, TEL, ENDERECO, NUMERO, CIDADE, ESTADO)\");\n        sb.append(\"VALUES (nextval('sq_cliente'),?,?,?,?,?,?,?)\");\n        return sb.toString();\n    }\n\n    @Override\n    protected void setParametrosQueryInsercao(PreparedStatement stmInsert, Cliente entity) throws SQLException {\n        stmInsert.setString(1, entity.getNome());\n        stmInsert.setLong(2, entity.getCpf());\n        stmInsert.setLong(3, entity.getTel());\n        stmInsert.setString(4, entity.getEnd());\n        stmInsert.setLong(5, entity.getNumero());\n        stmInsert.setString(6, entity.getCidade());\n        stmInsert.setString(7, entity.getEstado());\n\n    }\n\n    @Override\n    protected String getQueryExclusao() {\n        return \"DELETE FROM TB_CLIENTE WHERE CPF = ?\";\n    }\n\n    @Override\n    protected void setParametrosQueryExclusao(PreparedStatement stmExclusao, Long valor) throws SQLException {\n        stmExclusao.setLong(1, valor);\n    }\n\n    @Override\n    protected String getQueryAtualizacao() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"UPDATE TB_CLIENTE \");\n        sb.append(\"SET NOME = ?,\");\n        sb.append(\"TEL = ?,\");\n        sb.append(\"ENDERECO = ?,\");\n        sb.append(\"NUMERO = ?,\");\n        sb.append(\"CIDADE = ?,\");\n        sb.append(\"ESTADO = ?\");\n        sb.append(\"WHERE CPF = ? \");\n        return sb.toString();\n    }\n\n    @Override\n    protected void setParametrosQueryAtualizacao(PreparedStatement stmUpdate, Cliente entity) throws SQLException {\n        stmUpdate.setString(1, entity.getNome());\n        stmUpdate.setLong(2, entity.getTel());\n        stmUpdate.setString(3, entity.getEnd());\n        stmUpdate.setLong(4, entity.getNumero());\n        stmUpdate.setString(5, entity.getCidade());\n        stmUpdate.setString(6, entity.getEstado());\n        stmUpdate.setLong(7, entity.getCpf());\n    }\n\n    @Override\n    protected void setParametrosQuerySelect(PreparedStatement stmSelect, Long valor) throws SQLException {\n        stmSelect.setLong(1, valor);\n    }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/br/com/lnohara/mod30/dao/ClienteDAO.java b/src/br/com/lnohara/mod30/dao/ClienteDAO.java
--- a/src/br/com/lnohara/mod30/dao/ClienteDAO.java	(revision ea65dde582895610cb63e742f44121c4d351a6ba)
+++ b/src/br/com/lnohara/mod30/dao/ClienteDAO.java	(date 1667779854861)
@@ -27,15 +27,15 @@
         entityCadastrado.setNome(entity.getNome());
         entityCadastrado.setNumero(entity.getNumero());
         entityCadastrado.setTel(entity.getTel());
-
+        entityCadastrado.setGenero(entity.getGenero());
     }
 
     @Override
     protected String getQueryInsercao() {
         StringBuilder sb = new StringBuilder();
         sb.append("INSERT INTO TB_CLIENTE ");
-        sb.append("(ID, NOME, CPF, TEL, ENDERECO, NUMERO, CIDADE, ESTADO)");
-        sb.append("VALUES (nextval('sq_cliente'),?,?,?,?,?,?,?)");
+        sb.append("(ID, NOME, CPF, TEL, ENDERECO, NUMERO, CIDADE, ESTADO, GENERO)");
+        sb.append("VALUES (nextval('sq_cliente'),?,?,?,?,?,?,?,?)");
         return sb.toString();
     }
 
@@ -48,7 +48,7 @@
         stmInsert.setLong(5, entity.getNumero());
         stmInsert.setString(6, entity.getCidade());
         stmInsert.setString(7, entity.getEstado());
-
+        stmInsert.setString(8, entity.getGenero());
     }
 
     @Override
@@ -70,7 +70,9 @@
         sb.append("ENDERECO = ?,");
         sb.append("NUMERO = ?,");
         sb.append("CIDADE = ?,");
-        sb.append("ESTADO = ?");
+        sb.append("ESTADO = ?,");
+        sb.append("CPF = ?,");
+        sb.append("GENERO = ?");
         sb.append("WHERE CPF = ? ");
         return sb.toString();
     }
@@ -84,6 +86,7 @@
         stmUpdate.setString(5, entity.getCidade());
         stmUpdate.setString(6, entity.getEstado());
         stmUpdate.setLong(7, entity.getCpf());
+        stmUpdate.setString(8, entity.getGenero());
     }
 
     @Override
Index: src/br/com/lnohara/mod30/dao/factory/ClienteFactory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package br.com.lnohara.mod30.dao.factory;\n\nimport br.com.lnohara.mod30.domain.Cliente;\n\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\n\npublic class ClienteFactory {\n\n    public static Cliente convert(ResultSet rs) throws SQLException {\n        Cliente cliente = new Cliente();\n        cliente.setId(rs.getLong(\"ID_CLIENTE\"));\n        cliente.setNome(rs.getString((\"NOME\")));\n        cliente.setCpf(rs.getLong((\"CPF\")));\n        cliente.setTel(rs.getLong((\"TEL\")));\n        cliente.setEnd(rs.getString((\"ENDERECO\")));\n        cliente.setNumero(rs.getInt((\"NUMERO\")));\n        cliente.setCidade(rs.getString((\"CIDADE\")));\n        cliente.setEstado(rs.getString((\"ESTADO\")));\n        return cliente;\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/br/com/lnohara/mod30/dao/factory/ClienteFactory.java b/src/br/com/lnohara/mod30/dao/factory/ClienteFactory.java
--- a/src/br/com/lnohara/mod30/dao/factory/ClienteFactory.java	(revision ea65dde582895610cb63e742f44121c4d351a6ba)
+++ b/src/br/com/lnohara/mod30/dao/factory/ClienteFactory.java	(date 1667779844488)
@@ -17,6 +17,7 @@
         cliente.setNumero(rs.getInt(("NUMERO")));
         cliente.setCidade(rs.getString(("CIDADE")));
         cliente.setEstado(rs.getString(("ESTADO")));
+        cliente.setGenero(rs.getString(("GENERO")));
         return cliente;
     }
 }
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"e2df08a5-0cd4-4945-9179-819e24b75415\" name=\"Changes\" comment=\"\">\n      <change afterPath=\"$PROJECT_DIR$/src/br/com/lnohara/mod30/anotacao/ColunaTabela.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/br/com/lnohara/mod30/anotacao/Tabela.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/br/com/lnohara/mod30/anotacao/TipoChave.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/br/com/lnohara/mod30/dao/ClienteDAO.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/br/com/lnohara/mod30/dao/ProdutoDAO.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/br/com/lnohara/mod30/dao/VendaDAO.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/br/com/lnohara/mod30/dao/factory/ClienteFactory.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/br/com/lnohara/mod30/dao/factory/ProdutoFactory.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/br/com/lnohara/mod30/dao/factory/ProdutoQuantidadeFactory.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/br/com/lnohara/mod30/dao/factory/VendaFactory.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/br/com/lnohara/mod30/dao/generic/GenericDAO.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/br/com/lnohara/mod30/dao/generic/IGenericDAO.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/br/com/lnohara/mod30/dao/generic/SingletonMap.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/br/com/lnohara/mod30/dao/generic/jdbc/ConnectionFactory.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/br/com/lnohara/mod30/dao/interfaces/IClienteDAO.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/br/com/lnohara/mod30/dao/interfaces/IProdutoDAO.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/br/com/lnohara/mod30/dao/interfaces/IVendaDAO.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/br/com/lnohara/mod30/dao/interfaces/Persistente.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/br/com/lnohara/mod30/domain/Produto.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/br/com/lnohara/mod30/domain/ProdutoQuantidade.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/br/com/lnohara/mod30/domain/Venda.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/br/com/lnohara/mod30/exceptions/DAOException.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/br/com/lnohara/mod30/exceptions/MaisDeUmRegistroException.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/br/com/lnohara/mod30/exceptions/TableException.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/br/com/lnohara/mod30/exceptions/TipoChaveNaoEncontradaException.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/br/com/lnohara/mod30/exceptions/TipoElementoNaoConhecidoException.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/br/com/lnohara/mod30/services/ClienteService.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/br/com/lnohara/mod30/services/IClienteService.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/br/com/lnohara/mod30/services/IProdutoService.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/br/com/lnohara/mod30/services/ProdutoService.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/br/com/lnohara/mod30/services/generic/GenericService.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/br/com/lnohara/mod30/services/generic/IGenericService.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/br/com/lnohara/mod30/sql/script.sql\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/testeUnitario/mod30/AllTests.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/testeUnitario/mod30/ClienteDAOTest.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/testeUnitario/mod30/ClienteServiceTest.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/testeUnitario/mod30/ProdutoDAOTest.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/testeUnitario/mod30/ProdutoServiceTest.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/testeUnitario/mod30/VendaDAOTest.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/testeUnitario/mod30/dao/ClienteDaoMock.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/testeUnitario/mod30/dao/ProdutoDaoMock.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/out/production/ebac/br/com/lnohara/mod29/dao/generic/jdbc/ConnectionFactory.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/ebac/br/com/lnohara/mod29/dao/generic/jdbc/ConnectionFactory.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/out/production/ebac/br/com/lnohara/mod29/scripts/scipt_banco.sql\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/ebac/br/com/lnohara/mod29/scripts/scipt_banco.sql\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Interface\" />\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"ProjectId\" id=\"2CaTMABU0Zf22Mn53XOMnIutyXg\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;Downloaded.Files.Path.Enabled&quot;: &quot;false&quot;,\n    &quot;Repository.Attach.Annotations&quot;: &quot;false&quot;,\n    &quot;Repository.Attach.JavaDocs&quot;: &quot;false&quot;,\n    &quot;Repository.Attach.Sources&quot;: &quot;false&quot;,\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\n    &quot;last_opened_file_path&quot;: &quot;/home/nohara/Postgres/postgresql-42.4.2.jar&quot;,\n    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,\n    &quot;project.structure.proportion&quot;: &quot;0.0&quot;,\n    &quot;project.structure.side.proportion&quot;: &quot;0.0&quot;\n  }\n}</component>\n  <component name=\"RecentsManager\">\n    <key name=\"MoveClassesOrPackagesDialog.RECENTS_KEY\">\n      <recent name=\"br.com.lnohara.mod30.dao.generic\" />\n    </key>\n    <key name=\"CopyClassDialog.RECENTS_KEY\">\n      <recent name=\"br.com.lnohara.mod29.dao.generic.jdbc\" />\n    </key>\n  </component>\n  <component name=\"RunManager\" selected=\"JUnit.AllTests\">\n    <configuration name=\"AllTests\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"ebac\" />\n      <extension name=\"coverage\">\n        <pattern>\n          <option name=\"PATTERN\" value=\"mod30.*\" />\n          <option name=\"ENABLED\" value=\"true\" />\n        </pattern>\n      </extension>\n      <option name=\"PACKAGE_NAME\" value=\"mod30\" />\n      <option name=\"MAIN_CLASS_NAME\" value=\"mod30.AllTests\" />\n      <option name=\"TEST_OBJECT\" value=\"class\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"ClienteTest\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"ebac\" />\n      <extension name=\"coverage\">\n        <pattern>\n          <option name=\"PATTERN\" value=\"mod29.domain.*\" />\n          <option name=\"ENABLED\" value=\"true\" />\n        </pattern>\n      </extension>\n      <option name=\"PACKAGE_NAME\" value=\"mod29.domain\" />\n      <option name=\"MAIN_CLASS_NAME\" value=\"mod29.domain.ClienteTest\" />\n      <option name=\"TEST_OBJECT\" value=\"class\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"ProdutoTest\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"ebac\" />\n      <extension name=\"coverage\">\n        <pattern>\n          <option name=\"PATTERN\" value=\"mod29.domain.*\" />\n          <option name=\"ENABLED\" value=\"true\" />\n        </pattern>\n      </extension>\n      <option name=\"PACKAGE_NAME\" value=\"mod29.domain\" />\n      <option name=\"MAIN_CLASS_NAME\" value=\"mod29.domain.ProdutoTest\" />\n      <option name=\"TEST_OBJECT\" value=\"class\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"ProdutoTest.testCreateProduto\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"ebac\" />\n      <extension name=\"coverage\">\n        <pattern>\n          <option name=\"PATTERN\" value=\"mod29.domain.*\" />\n          <option name=\"ENABLED\" value=\"true\" />\n        </pattern>\n      </extension>\n      <option name=\"PACKAGE_NAME\" value=\"mod29.domain\" />\n      <option name=\"MAIN_CLASS_NAME\" value=\"mod29.domain.ProdutoTest\" />\n      <option name=\"METHOD_NAME\" value=\"testCreateProduto\" />\n      <option name=\"TEST_OBJECT\" value=\"method\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"ProdutoTest.testReadProduto\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"ebac\" />\n      <extension name=\"coverage\">\n        <pattern>\n          <option name=\"PATTERN\" value=\"mod29.domain.*\" />\n          <option name=\"ENABLED\" value=\"true\" />\n        </pattern>\n      </extension>\n      <option name=\"PACKAGE_NAME\" value=\"mod29.domain\" />\n      <option name=\"MAIN_CLASS_NAME\" value=\"mod29.domain.ProdutoTest\" />\n      <option name=\"METHOD_NAME\" value=\"testReadProduto\" />\n      <option name=\"TEST_OBJECT\" value=\"method\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"JUnit.AllTests\" />\n        <item itemvalue=\"JUnit.ProdutoTest\" />\n        <item itemvalue=\"JUnit.ClienteTest\" />\n        <item itemvalue=\"JUnit.ProdutoTest.testReadProduto\" />\n        <item itemvalue=\"JUnit.ProdutoTest.testCreateProduto\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"e2df08a5-0cd4-4945-9179-819e24b75415\" name=\"Changes\" comment=\"\" />\n      <created>1659039646720</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1659039646720</updated>\n    </task>\n    <servers />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"XDebuggerManager\">\n    <breakpoint-manager>\n      <breakpoints>\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\n          <url>file://$PROJECT_DIR$/testeUnitario/mod29/domain/ProdutoTest.java</url>\n          <line>40</line>\n          <option name=\"timeStamp\" value=\"8\" />\n        </line-breakpoint>\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\n          <url>file://$PROJECT_DIR$/testeUnitario/mod29/domain/ProdutoTest.java</url>\n          <line>44</line>\n          <option name=\"timeStamp\" value=\"10\" />\n        </line-breakpoint>\n      </breakpoints>\n    </breakpoint-manager>\n    <pin-to-top-manager>\n      <pinned-members>\n        <PinnedItemInfo parentTag=\"br.com.lnohara.mod29.domain.Produto\" memberName=\"id\" />\n      </pinned-members>\n    </pin-to-top-manager>\n  </component>\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\n    <SUITE FILE_PATH=\"coverage/java_Ebac$ClienteTest_testCliente.ic\" NAME=\"ClienteTest.testCliente Coverage Results\" MODIFIED=\"1661911574621\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"idea\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\">\n      <FILTER>mod29.domain.*</FILTER>\n    </SUITE>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision ea65dde582895610cb63e742f44121c4d351a6ba)
+++ b/.idea/workspace.xml	(date 1667779381337)
@@ -5,50 +5,20 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="e2df08a5-0cd4-4945-9179-819e24b75415" name="Changes" comment="">
-      <change afterPath="$PROJECT_DIR$/src/br/com/lnohara/mod30/anotacao/ColunaTabela.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/br/com/lnohara/mod30/anotacao/Tabela.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/br/com/lnohara/mod30/anotacao/TipoChave.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/br/com/lnohara/mod30/dao/ClienteDAO.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/br/com/lnohara/mod30/dao/ProdutoDAO.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/br/com/lnohara/mod30/dao/VendaDAO.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/br/com/lnohara/mod30/dao/factory/ClienteFactory.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/br/com/lnohara/mod30/dao/factory/ProdutoFactory.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/br/com/lnohara/mod30/dao/factory/ProdutoQuantidadeFactory.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/br/com/lnohara/mod30/dao/factory/VendaFactory.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/br/com/lnohara/mod30/dao/generic/GenericDAO.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/br/com/lnohara/mod30/dao/generic/IGenericDAO.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/br/com/lnohara/mod30/dao/generic/SingletonMap.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/br/com/lnohara/mod30/dao/generic/jdbc/ConnectionFactory.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/br/com/lnohara/mod30/dao/interfaces/IClienteDAO.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/br/com/lnohara/mod30/dao/interfaces/IProdutoDAO.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/br/com/lnohara/mod30/dao/interfaces/IVendaDAO.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/br/com/lnohara/mod30/dao/interfaces/Persistente.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/br/com/lnohara/mod30/domain/Produto.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/br/com/lnohara/mod30/domain/ProdutoQuantidade.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/br/com/lnohara/mod30/domain/Venda.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/br/com/lnohara/mod30/exceptions/DAOException.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/br/com/lnohara/mod30/exceptions/MaisDeUmRegistroException.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/br/com/lnohara/mod30/exceptions/TableException.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/br/com/lnohara/mod30/exceptions/TipoChaveNaoEncontradaException.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/br/com/lnohara/mod30/exceptions/TipoElementoNaoConhecidoException.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/br/com/lnohara/mod30/services/ClienteService.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/br/com/lnohara/mod30/services/IClienteService.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/br/com/lnohara/mod30/services/IProdutoService.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/br/com/lnohara/mod30/services/ProdutoService.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/br/com/lnohara/mod30/services/generic/GenericService.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/br/com/lnohara/mod30/services/generic/IGenericService.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/br/com/lnohara/mod30/sql/script.sql" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/testeUnitario/mod30/AllTests.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/testeUnitario/mod30/ClienteDAOTest.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/testeUnitario/mod30/ClienteServiceTest.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/testeUnitario/mod30/ProdutoDAOTest.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/testeUnitario/mod30/ProdutoServiceTest.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/testeUnitario/mod30/VendaDAOTest.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/testeUnitario/mod30/dao/ClienteDaoMock.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/testeUnitario/mod30/dao/ProdutoDaoMock.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/ebac/br/com/lnohara/mod29/dao/generic/jdbc/ConnectionFactory.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/ebac/br/com/lnohara/mod29/dao/generic/jdbc/ConnectionFactory.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/ebac/br/com/lnohara/mod29/scripts/scipt_banco.sql" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/ebac/br/com/lnohara/mod29/scripts/scipt_banco.sql" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/ebac.iml" beforeDir="false" afterPath="$PROJECT_DIR$/ebac.iml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/ebac/br/com/lnohara/mod30/dao/ClienteDAO.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/ebac/br/com/lnohara/mod30/dao/ClienteDAO.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/ebac/br/com/lnohara/mod30/dao/factory/ClienteFactory.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/ebac/br/com/lnohara/mod30/dao/factory/ClienteFactory.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/ebac/br/com/lnohara/mod30/dao/generic/GenericDAO.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/ebac/br/com/lnohara/mod30/dao/generic/GenericDAO.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/ebac/br/com/lnohara/mod30/domain/Cliente.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/ebac/br/com/lnohara/mod30/domain/Cliente.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/test/ebac/mod30/ClienteDAOTest.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/test/ebac/mod30/ClienteDAOTest.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/test/ebac/mod30/ClienteServiceTest.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/test/ebac/mod30/ClienteServiceTest.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/br/com/lnohara/mod30/dao/ClienteDAO.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/br/com/lnohara/mod30/dao/ClienteDAO.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/br/com/lnohara/mod30/dao/factory/ClienteFactory.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/br/com/lnohara/mod30/dao/factory/ClienteFactory.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/br/com/lnohara/mod30/dao/generic/GenericDAO.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/br/com/lnohara/mod30/dao/generic/GenericDAO.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/br/com/lnohara/mod30/domain/Cliente.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/br/com/lnohara/mod30/domain/Cliente.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/testeUnitario/mod30/ClienteDAOTest.java" beforeDir="false" afterPath="$PROJECT_DIR$/testeUnitario/mod30/ClienteDAOTest.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/testeUnitario/mod30/ClienteServiceTest.java" beforeDir="false" afterPath="$PROJECT_DIR$/testeUnitario/mod30/ClienteServiceTest.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -83,10 +53,10 @@
     &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
     &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
     &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
-    &quot;last_opened_file_path&quot;: &quot;/home/nohara/Postgres/postgresql-42.4.2.jar&quot;,
+    &quot;last_opened_file_path&quot;: &quot;/home/nohara/Dropbox/java/jbdc/08/postgresql-42.5.0.jar&quot;,
     &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,
     &quot;project.structure.proportion&quot;: &quot;0.0&quot;,
-    &quot;project.structure.side.proportion&quot;: &quot;0.0&quot;
+    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;
   }
 }</component>
   <component name="RecentsManager">
@@ -97,7 +67,7 @@
       <recent name="br.com.lnohara.mod29.dao.generic.jdbc" />
     </key>
   </component>
-  <component name="RunManager" selected="JUnit.AllTests">
+  <component name="RunManager" selected="JUnit.ClienteDAOTest.alterarCliente">
     <configuration name="AllTests" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
       <module name="ebac" />
       <extension name="coverage">
@@ -113,75 +83,74 @@
         <option name="Make" enabled="true" />
       </method>
     </configuration>
-    <configuration name="ClienteTest" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
+    <configuration name="ClienteDAOTest" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
       <module name="ebac" />
       <extension name="coverage">
         <pattern>
-          <option name="PATTERN" value="mod29.domain.*" />
+          <option name="PATTERN" value="mod30.*" />
           <option name="ENABLED" value="true" />
         </pattern>
       </extension>
-      <option name="PACKAGE_NAME" value="mod29.domain" />
-      <option name="MAIN_CLASS_NAME" value="mod29.domain.ClienteTest" />
+      <option name="PACKAGE_NAME" value="mod30" />
+      <option name="MAIN_CLASS_NAME" value="mod30.ClienteDAOTest" />
       <option name="TEST_OBJECT" value="class" />
       <method v="2">
         <option name="Make" enabled="true" />
       </method>
     </configuration>
-    <configuration name="ProdutoTest" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
+    <configuration name="ClienteDAOTest.alterarCliente" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
       <module name="ebac" />
       <extension name="coverage">
         <pattern>
-          <option name="PATTERN" value="mod29.domain.*" />
+          <option name="PATTERN" value="mod30.*" />
           <option name="ENABLED" value="true" />
         </pattern>
       </extension>
-      <option name="PACKAGE_NAME" value="mod29.domain" />
-      <option name="MAIN_CLASS_NAME" value="mod29.domain.ProdutoTest" />
-      <option name="TEST_OBJECT" value="class" />
+      <option name="PACKAGE_NAME" value="mod30" />
+      <option name="MAIN_CLASS_NAME" value="mod30.ClienteDAOTest" />
+      <option name="METHOD_NAME" value="alterarCliente" />
+      <option name="TEST_OBJECT" value="method" />
       <method v="2">
         <option name="Make" enabled="true" />
       </method>
     </configuration>
-    <configuration name="ProdutoTest.testCreateProduto" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
+    <configuration name="ClienteServiceTest" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
       <module name="ebac" />
       <extension name="coverage">
         <pattern>
-          <option name="PATTERN" value="mod29.domain.*" />
+          <option name="PATTERN" value="mod30.*" />
           <option name="ENABLED" value="true" />
         </pattern>
       </extension>
-      <option name="PACKAGE_NAME" value="mod29.domain" />
-      <option name="MAIN_CLASS_NAME" value="mod29.domain.ProdutoTest" />
-      <option name="METHOD_NAME" value="testCreateProduto" />
-      <option name="TEST_OBJECT" value="method" />
+      <option name="PACKAGE_NAME" value="mod30" />
+      <option name="MAIN_CLASS_NAME" value="mod30.ClienteServiceTest" />
+      <option name="TEST_OBJECT" value="class" />
       <method v="2">
         <option name="Make" enabled="true" />
       </method>
     </configuration>
-    <configuration name="ProdutoTest.testReadProduto" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
+    <configuration name="ProdutoDAOTest" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
       <module name="ebac" />
       <extension name="coverage">
         <pattern>
-          <option name="PATTERN" value="mod29.domain.*" />
+          <option name="PATTERN" value="mod30.*" />
           <option name="ENABLED" value="true" />
         </pattern>
       </extension>
-      <option name="PACKAGE_NAME" value="mod29.domain" />
-      <option name="MAIN_CLASS_NAME" value="mod29.domain.ProdutoTest" />
-      <option name="METHOD_NAME" value="testReadProduto" />
-      <option name="TEST_OBJECT" value="method" />
+      <option name="PACKAGE_NAME" value="mod30" />
+      <option name="MAIN_CLASS_NAME" value="mod30.ProdutoDAOTest" />
+      <option name="TEST_OBJECT" value="class" />
       <method v="2">
         <option name="Make" enabled="true" />
       </method>
     </configuration>
     <recent_temporary>
       <list>
+        <item itemvalue="JUnit.ClienteDAOTest.alterarCliente" />
+        <item itemvalue="JUnit.ClienteDAOTest" />
+        <item itemvalue="JUnit.ClienteServiceTest" />
         <item itemvalue="JUnit.AllTests" />
-        <item itemvalue="JUnit.ProdutoTest" />
-        <item itemvalue="JUnit.ClienteTest" />
-        <item itemvalue="JUnit.ProdutoTest.testReadProduto" />
-        <item itemvalue="JUnit.ProdutoTest.testCreateProduto" />
+        <item itemvalue="JUnit.ProdutoDAOTest" />
       </list>
     </recent_temporary>
   </component>
@@ -220,15 +189,29 @@
           <line>44</line>
           <option name="timeStamp" value="10" />
         </line-breakpoint>
+        <line-breakpoint enabled="true" type="java-line">
+          <url>file://$PROJECT_DIR$/src/br/com/lnohara/mod30/dao/generic/GenericDAO.java</url>
+          <line>130</line>
+          <option name="timeStamp" value="12" />
+        </line-breakpoint>
+        <breakpoint enabled="true" type="java-exception">
+          <properties class="org.postgresql.util.PSQLException" package="org.postgresql.util" />
+          <option name="timeStamp" value="13" />
+        </breakpoint>
       </breakpoints>
     </breakpoint-manager>
     <pin-to-top-manager>
       <pinned-members>
         <PinnedItemInfo parentTag="br.com.lnohara.mod29.domain.Produto" memberName="id" />
+        <PinnedItemInfo parentTag="org.postgresql.core.v3.SimpleParameterList" memberName="encoded" />
+        <PinnedItemInfo parentTag="org.postgresql.core.v3.SimpleParameterList" memberName="transferModeRegistry" />
       </pinned-members>
     </pin-to-top-manager>
   </component>
   <component name="com.intellij.coverage.CoverageDataManagerImpl">
+    <SUITE FILE_PATH="coverage/java_Ebac$ClienteServiceTest.ic" NAME="ClienteServiceTest Coverage Results" MODIFIED="1666182128809" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="idea" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false">
+      <FILTER>mod30.*</FILTER>
+    </SUITE>
     <SUITE FILE_PATH="coverage/java_Ebac$ClienteTest_testCliente.ic" NAME="ClienteTest.testCliente Coverage Results" MODIFIED="1661911574621" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="idea" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false">
       <FILTER>mod29.domain.*</FILTER>
     </SUITE>
Index: ebac.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<module type=\"JAVA_MODULE\" version=\"4\">\n  <component name=\"NewModuleRootManager\" inherit-compiler-output=\"true\">\n    <exclude-output />\n    <content url=\"file://$MODULE_DIR$\">\n      <sourceFolder url=\"file://$MODULE_DIR$/src\" isTestSource=\"false\" />\n      <sourceFolder url=\"file://$MODULE_DIR$/testeUnitario\" isTestSource=\"true\" />\n    </content>\n    <orderEntry type=\"inheritedJdk\" />\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\n    <orderEntry type=\"module-library\" exported=\"\" scope=\"TEST\">\n      <library name=\"JUnit4\">\n        <CLASSES>\n          <root url=\"jar://$MAVEN_REPOSITORY$/junit/junit/4.13.1/junit-4.13.1.jar!/\" />\n          <root url=\"jar://$MAVEN_REPOSITORY$/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar!/\" />\n        </CLASSES>\n        <JAVADOC />\n        <SOURCES />\n      </library>\n    </orderEntry>\n    <orderEntry type=\"module-library\" scope=\"TEST\">\n      <library name=\"JUnit4\">\n        <CLASSES>\n          <root url=\"jar://$MAVEN_REPOSITORY$/junit/junit/4.13.1/junit-4.13.1.jar!/\" />\n          <root url=\"jar://$MAVEN_REPOSITORY$/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar!/\" />\n        </CLASSES>\n        <JAVADOC />\n        <SOURCES />\n      </library>\n    </orderEntry>\n    <orderEntry type=\"module-library\" exported=\"\">\n      <library>\n        <CLASSES>\n          <root url=\"jar://$USER_HOME$/Postgres/postgresql-42.4.2.jar!/\" />\n        </CLASSES>\n        <JAVADOC />\n        <SOURCES />\n      </library>\n    </orderEntry>\n  </component>\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ebac.iml b/ebac.iml
--- a/ebac.iml	(revision ea65dde582895610cb63e742f44121c4d351a6ba)
+++ b/ebac.iml	(date 1666184648768)
@@ -28,10 +28,10 @@
         <SOURCES />
       </library>
     </orderEntry>
-    <orderEntry type="module-library" exported="">
+    <orderEntry type="module-library">
       <library>
         <CLASSES>
-          <root url="jar://$USER_HOME$/Postgres/postgresql-42.4.2.jar!/" />
+          <root url="jar://$USER_HOME$/Dropbox/java/jbdc/08/postgresql-42.5.0.jar!/" />
         </CLASSES>
         <JAVADOC />
         <SOURCES />
Index: testeUnitario/mod30/ClienteDAOTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package mod30;\n\n\n\nimport static org.junit.Assert.assertTrue;\n\nimport java.util.Collection;\n\nimport br.com.lnohara.mod30.dao.ClienteDAO;\nimport br.com.lnohara.mod30.dao.interfaces.IClienteDAO;\nimport br.com.lnohara.mod30.domain.Cliente;\nimport br.com.lnohara.mod30.exceptions.DAOException;\nimport br.com.lnohara.mod30.exceptions.MaisDeUmRegistroException;\nimport br.com.lnohara.mod30.exceptions.TableException;\nimport br.com.lnohara.mod30.exceptions.TipoChaveNaoEncontradaException;\nimport org.junit.After;\nimport org.junit.Assert;\nimport org.junit.Test;\n\npublic class ClienteDAOTest {\n\n    private IClienteDAO clienteDao;\n\n    public ClienteDAOTest() {\n        clienteDao = new ClienteDAO();\n    }\n\n    @After\n    public void end() throws DAOException {\n        Collection<Cliente> list = clienteDao.buscarTodos();\n        list.forEach(cli -> {\n            try {\n                clienteDao.excluir(cli.getCpf());\n            } catch (DAOException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n        });\n    }\n\n    @Test\n    public void pesquisarCliente() throws MaisDeUmRegistroException, TableException, TipoChaveNaoEncontradaException, DAOException {\n        Cliente cliente = new Cliente();\n        cliente.setCpf(12312312312L);\n        cliente.setNome(\"Rodrigo\");\n        cliente.setCidade(\"São Paulo\");\n        cliente.setEnd(\"End\");\n        cliente.setEstado(\"SP\");\n        cliente.setNumero(10);\n        cliente.setTel(1199999999L);\n        clienteDao.cadastrar(cliente);\n\n        Cliente clienteConsultado = clienteDao.consultar(cliente.getCpf());\n        Assert.assertNotNull(clienteConsultado);\n\n        clienteDao.excluir(cliente.getCpf());\n    }\n\n    @Test\n    public void salvarCliente() throws TipoChaveNaoEncontradaException, MaisDeUmRegistroException, TableException, DAOException {\n        Cliente cliente = new Cliente();\n        cliente.setCpf(56565656565L);\n        cliente.setNome(\"Rodrigo\");\n        cliente.setCidade(\"São Paulo\");\n        cliente.setEnd(\"End\");\n        cliente.setEstado(\"SP\");\n        cliente.setNumero(10);\n        cliente.setTel(1199999999L);\n        Boolean retorno = clienteDao.cadastrar(cliente);\n        Assert.assertTrue(retorno);\n\n        Cliente clienteConsultado = clienteDao.consultar(cliente.getCpf());\n        Assert.assertNotNull(clienteConsultado);\n\n        clienteDao.excluir(cliente.getCpf());\n    }\n\n\n    @Test\n    public void excluirCliente() throws TipoChaveNaoEncontradaException, MaisDeUmRegistroException, TableException, DAOException {\n        Cliente cliente = new Cliente();\n        cliente.setCpf(56565656565L);\n        cliente.setNome(\"Rodrigo\");\n        cliente.setCidade(\"São Paulo\");\n        cliente.setEnd(\"End\");\n        cliente.setEstado(\"SP\");\n        cliente.setNumero(10);\n        cliente.setTel(1199999999L);\n        Boolean retorno = clienteDao.cadastrar(cliente);\n        Assert.assertTrue(retorno);\n\n        Cliente clienteConsultado = clienteDao.consultar(cliente.getCpf());\n        Assert.assertNotNull(clienteConsultado);\n\n        clienteDao.excluir(cliente.getCpf());\n        clienteConsultado = clienteDao.consultar(cliente.getCpf());\n        Assert.assertNull(clienteConsultado);\n    }\n\n    @Test\n    public void alterarCliente() throws TipoChaveNaoEncontradaException, MaisDeUmRegistroException, TableException, DAOException {\n        Cliente cliente = new Cliente();\n        cliente.setCpf(56565656565L);\n        cliente.setNome(\"Rodrigo\");\n        cliente.setCidade(\"São Paulo\");\n        cliente.setEnd(\"End\");\n        cliente.setEstado(\"SP\");\n        cliente.setNumero(10);\n        cliente.setTel(1199999999L);\n        Boolean retorno = clienteDao.cadastrar(cliente);\n        Assert.assertTrue(retorno);\n\n        Cliente clienteConsultado = clienteDao.consultar(cliente.getCpf());\n        Assert.assertNotNull(clienteConsultado);\n\n        clienteConsultado.setNome(\"Rodrigo Pires\");\n        clienteDao.alterar(clienteConsultado);\n\n        Cliente clienteAlterado = clienteDao.consultar(clienteConsultado.getCpf());\n        Assert.assertNotNull(clienteAlterado);\n        Assert.assertEquals(\"Rodrigo Pires\", clienteAlterado.getNome());\n\n        clienteDao.excluir(cliente.getCpf());\n        clienteConsultado = clienteDao.consultar(cliente.getCpf());\n        Assert.assertNull(clienteConsultado);\n    }\n\n    @Test\n    public void buscarTodos() throws TipoChaveNaoEncontradaException, DAOException {\n        Cliente cliente = new Cliente();\n        cliente.setCpf(56565656565L);\n        cliente.setNome(\"Rodrigo\");\n        cliente.setCidade(\"São Paulo\");\n        cliente.setEnd(\"End\");\n        cliente.setEstado(\"SP\");\n        cliente.setNumero(10);\n        cliente.setTel(1199999999L);\n        Boolean retorno = clienteDao.cadastrar(cliente);\n        Assert.assertTrue(retorno);\n\n        Cliente cliente1 = new Cliente();\n        cliente1.setCpf(56565656569L);\n        cliente1.setNome(\"Rodrigo\");\n        cliente1.setCidade(\"São Paulo\");\n        cliente1.setEnd(\"End\");\n        cliente1.setEstado(\"SP\");\n        cliente1.setNumero(10);\n        cliente1.setTel(1199999999L);\n        Boolean retorno1 = clienteDao.cadastrar(cliente1);\n        Assert.assertTrue(retorno1);\n\n        Collection<Cliente> list = clienteDao.buscarTodos();\n        assertTrue(list != null);\n        assertTrue(list.size() == 2);\n\n        list.forEach(cli -> {\n            try {\n                clienteDao.excluir(cli.getCpf());\n            } catch (DAOException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n        });\n\n        Collection<Cliente> list1 = clienteDao.buscarTodos();\n        assertTrue(list1 != null);\n        assertTrue(list1.size() == 0);\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/testeUnitario/mod30/ClienteDAOTest.java b/testeUnitario/mod30/ClienteDAOTest.java
--- a/testeUnitario/mod30/ClienteDAOTest.java	(revision ea65dde582895610cb63e742f44121c4d351a6ba)
+++ b/testeUnitario/mod30/ClienteDAOTest.java	(date 1667779834824)
@@ -48,6 +48,7 @@
         cliente.setEstado("SP");
         cliente.setNumero(10);
         cliente.setTel(1199999999L);
+        cliente.setGenero("M");
         clienteDao.cadastrar(cliente);
 
         Cliente clienteConsultado = clienteDao.consultar(cliente.getCpf());
@@ -66,6 +67,7 @@
         cliente.setEstado("SP");
         cliente.setNumero(10);
         cliente.setTel(1199999999L);
+        cliente.setGenero("M");
         Boolean retorno = clienteDao.cadastrar(cliente);
         Assert.assertTrue(retorno);
 
@@ -86,6 +88,7 @@
         cliente.setEstado("SP");
         cliente.setNumero(10);
         cliente.setTel(1199999999L);
+        cliente.setGenero("M");
         Boolean retorno = clienteDao.cadastrar(cliente);
         Assert.assertTrue(retorno);
 
@@ -107,18 +110,21 @@
         cliente.setEstado("SP");
         cliente.setNumero(10);
         cliente.setTel(1199999999L);
+//        cliente.setGenero("M");
         Boolean retorno = clienteDao.cadastrar(cliente);
         Assert.assertTrue(retorno);
 
         Cliente clienteConsultado = clienteDao.consultar(cliente.getCpf());
         Assert.assertNotNull(clienteConsultado);
 
-        clienteConsultado.setNome("Rodrigo Pires");
+        clienteConsultado.setNome("Rafaela Pires");
+//        clienteConsultado.setGenero("F");
         clienteDao.alterar(clienteConsultado);
 
         Cliente clienteAlterado = clienteDao.consultar(clienteConsultado.getCpf());
         Assert.assertNotNull(clienteAlterado);
-        Assert.assertEquals("Rodrigo Pires", clienteAlterado.getNome());
+        Assert.assertEquals("Rafaela Pires", clienteAlterado.getNome());
+//        Assert.assertEquals("F", clienteAlterado.getGenero());
 
         clienteDao.excluir(cliente.getCpf());
         clienteConsultado = clienteDao.consultar(cliente.getCpf());
@@ -135,17 +141,19 @@
         cliente.setEstado("SP");
         cliente.setNumero(10);
         cliente.setTel(1199999999L);
+        cliente.setGenero("M");
         Boolean retorno = clienteDao.cadastrar(cliente);
         Assert.assertTrue(retorno);
 
         Cliente cliente1 = new Cliente();
         cliente1.setCpf(56565656569L);
-        cliente1.setNome("Rodrigo");
-        cliente1.setCidade("São Paulo");
-        cliente1.setEnd("End");
+        cliente1.setNome("Karla Silva");
+        cliente1.setCidade("São Vicente");
+        cliente1.setEnd("Avenida das Marés");
         cliente1.setEstado("SP");
-        cliente1.setNumero(10);
-        cliente1.setTel(1199999999L);
+        cliente1.setNumero(26);
+        cliente1.setTel(112233445566L);
+        cliente.setGenero("F");
         Boolean retorno1 = clienteDao.cadastrar(cliente1);
         Assert.assertTrue(retorno1);
 
Index: src/br/com/lnohara/mod30/dao/generic/GenericDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package br.com.lnohara.mod30.dao.generic;\n\nimport br.com.lnohara.mod30.anotacao.ColunaTabela;\nimport br.com.lnohara.mod30.anotacao.Tabela;\nimport br.com.lnohara.mod30.anotacao.TipoChave;\nimport br.com.lnohara.mod30.dao.generic.jdbc.ConnectionFactory;\nimport br.com.lnohara.mod30.dao.interfaces.Persistente;\nimport br.com.lnohara.mod30.exceptions.*;\n\nimport java.io.Serializable;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.math.BigDecimal;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\n\n\npublic abstract class GenericDAO<T extends Persistente, E extends Serializable> implements IGenericDAO<T,E> {\n\n\n    public abstract Class<T> getTipoClasse();\n\n    public abstract void atualiarDados(T entity, T entityCadastrado);\n\n    protected abstract String getQueryInsercao();\n\n    protected abstract String getQueryExclusao();\n\n    protected abstract String getQueryAtualizacao();\n\n    protected abstract void setParametrosQueryInsercao(PreparedStatement stmInsert, T entity) throws SQLException;\n\n    protected abstract void setParametrosQueryExclusao(PreparedStatement stmDelete, E valor) throws SQLException;\n\n    protected abstract void setParametrosQueryAtualizacao(PreparedStatement stmUpdate, T entity) throws SQLException;\n\n    protected abstract void setParametrosQuerySelect(PreparedStatement stmUpdate, E valor) throws SQLException;\n\n    public GenericDAO() {\n\n    }\n\n    public E getChave(T entity) throws TipoChaveNaoEncontradaException {\n        Field[] fields = entity.getClass().getDeclaredFields();\n        E returnValue = null;\n        for (Field field : fields) {\n            if (field.isAnnotationPresent(TipoChave.class)) {\n                TipoChave tipoChave = field.getAnnotation(TipoChave.class);\n                String nomeMetodo = tipoChave.value();\n                try {\n                    Method method = entity.getClass().getMethod(nomeMetodo);\n                    returnValue = (E) method.invoke(entity);\n                    return returnValue;\n                } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {\n                    //Criar exception de negócio TipoChaveNaoEncontradaException\n                    e.printStackTrace();\n                    throw new TipoChaveNaoEncontradaException(\"Chave principal do objeto \" + entity.getClass() + \" não encontrada\", e);\n                }\n            }\n        }\n        if (returnValue == null) {\n            String msg = \"Chave principal do objeto \" + entity.getClass() + \" não encontrada\";\n            System.out.println(\"**** ERRO ****\" + msg);\n            throw new TipoChaveNaoEncontradaException(msg);\n        }\n        return null;\n    }\n\n    @Override\n    public Boolean cadastrar(T entity) throws TipoChaveNaoEncontradaException, DAOException {\n        Connection connection = null;\n        PreparedStatement stm = null;\n        try {\n            connection = getConnection();\n            stm = connection.prepareStatement(getQueryInsercao(), Statement.RETURN_GENERATED_KEYS);\n            setParametrosQueryInsercao(stm, entity);\n            int rowsAffected = stm.executeUpdate();\n\n            if(rowsAffected > 0) {\n                try (ResultSet rs = stm.getGeneratedKeys()){\n                    if (rs.next()) {\n                        Persistente per = (Persistente) entity;\n                        per.setId(rs.getLong(1));\n                    }\n                }\n                return true;\n            }\n\n        } catch (SQLException e) {\n            throw new DAOException(\"ERRO CADASTRANDO OBJETO \", e);\n        } finally {\n            closeConnection(connection, stm, null);\n        }\n        return false;\n    }\n\n\n    @Override\n    public void excluir(E valor) throws DAOException {\n        Connection connection = getConnection();\n        PreparedStatement stm = null;\n        try {\n            stm = connection.prepareStatement(getQueryExclusao());\n            setParametrosQueryExclusao(stm, valor);\n            int rowsAffected = stm.executeUpdate();\n\n        } catch (SQLException e) {\n            throw new DAOException(\"ERRO EXCLUINDO OBJETO \", e);\n        } finally {\n            closeConnection(connection, stm, null);\n        }\n\n    }\n\n    @Override\n    public void alterar(T entity) throws TipoChaveNaoEncontradaException, DAOException {\n\n        Connection connection = getConnection();\n        PreparedStatement stm = null;\n        try {\n            stm = connection.prepareStatement(getQueryAtualizacao());\n            setParametrosQueryAtualizacao(stm, entity);\n            int rowsAffected = stm.executeUpdate();\n        } catch (SQLException e) {\n            throw new DAOException(\"ERRO ALTERANDO OBJETO \", e);\n        } finally {\n            closeConnection(connection, stm, null);\n        }\n\n    }\n\n    @Override\n    public T consultar(E valor) throws MaisDeUmRegistroException, TableException, DAOException {\n        try {\n            validarMaisDeUmRegistro(valor);\n            Connection connection = getConnection();\n            PreparedStatement stm = connection.prepareStatement(\"SELECT * FROM \" + getTableName() + \" WHERE \" + getNomeCampoChave(getTipoClasse()) + \" = ?\");\n            setParametrosQuerySelect(stm, valor);\n            ResultSet rs = stm.executeQuery();\n            if (rs.next()) {\n                T entity = getTipoClasse().getConstructor(null).newInstance(null);\n                Field[] fields = entity.getClass().getDeclaredFields();\n                for (Field field : fields) {\n                    if (field.isAnnotationPresent(ColunaTabela.class)) {\n                        ColunaTabela coluna = field.getAnnotation(ColunaTabela.class);\n                        String dbName = coluna.dbName();\n                        String javaSetName = coluna.setJavaName();\n                        Class<?> classField = field.getType();\n                        try {\n                            Method method = entity.getClass().getMethod(javaSetName, classField);\n                            setValueByType(entity, method, classField, rs, dbName);\n\n                        } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {\n                            throw new DAOException(\"ERRO CONSULTANDO OBJETO \", e);\n                        } catch (TipoElementoNaoConhecidoException e) {\n                            throw new DAOException(\"ERRO CONSULTANDO OBJETO \", e);\n                        }\n                    }\n                }\n                return entity;\n            }\n\n        } catch (SQLException | InstantiationException | IllegalAccessException | IllegalArgumentException | InvocationTargetException | NoSuchMethodException | SecurityException | TipoChaveNaoEncontradaException e) {\n            throw new DAOException(\"ERRO CONSULTANDO OBJETO \", e);\n        }\n        return null;\n    }\n\n    public String getNomeCampoChave(Class clazz) throws TipoChaveNaoEncontradaException {\n        Field[] fields = clazz.getDeclaredFields();\n        for (Field field : fields) {\n            if (field.isAnnotationPresent(TipoChave.class)\n                    && field.isAnnotationPresent(ColunaTabela.class)) {\n                ColunaTabela coluna = field.getAnnotation(ColunaTabela.class);\n                return coluna.dbName();\n            }\n        }\n\n        return null;\n    }\n\n    private void setValueByType(T entity, Method method, Class<?> classField, ResultSet rs, String fieldName) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException, SQLException, TipoElementoNaoConhecidoException {\n\n        if (classField.equals(Integer.class)) {\n            Integer val = rs.getInt(fieldName);\n            method.invoke(entity, val);\n        } else if (classField.equals(Long.class)) {\n            Long val = rs.getLong(fieldName);\n            method.invoke(entity, val);\n        } else if (classField.equals(Double.class)) {\n            Double val =  rs.getDouble(fieldName);\n            method.invoke(entity, val);\n        } else if (classField.equals(Short.class)) {\n            Short val =  rs.getShort(fieldName);\n            method.invoke(entity, val);\n        } else if (classField.equals(BigDecimal.class)) {\n            BigDecimal val =  rs.getBigDecimal(fieldName);\n            method.invoke(entity, val);\n        } else if (classField.equals(String.class)) {\n            String val =  rs.getString(fieldName);\n            method.invoke(entity, val);\n        } else {\n            throw new TipoElementoNaoConhecidoException(\"TIPO DE CLASSE NÃO CONHECIDO: \" + classField);\n        }\n\n    }\n\n    private Object getValueByType(Class<?> typeField, ResultSet rs, String fieldName) throws SQLException, TipoElementoNaoConhecidoException {\n        if (typeField.equals(Integer.TYPE)) {\n            return rs.getInt(fieldName);\n        } else if (typeField.equals(Long.TYPE)) {\n            return rs.getLong(fieldName);\n        } else if (typeField.equals(Double.TYPE)) {\n            return rs.getDouble(fieldName);\n        } else if (typeField.equals(Short.TYPE)) {\n            return rs.getShort(fieldName);\n        } else if (typeField.equals(BigDecimal.class)) {\n            return rs.getBigDecimal(fieldName);\n        } else if (typeField.equals(String.class)) {\n            return rs.getString(fieldName);\n        } else {\n            throw new TipoElementoNaoConhecidoException(\"TIPO DE CLASSE NÃO CONHECIDO: \" + typeField);\n        }\n    }\n\n    private Long validarMaisDeUmRegistro(E valor) throws MaisDeUmRegistroException, TableException, TipoChaveNaoEncontradaException, DAOException {\n        Connection connection = getConnection();\n        PreparedStatement stm = null;\n        ResultSet rs = null;\n        Long count = null;\n        try {\n            stm = connection.prepareStatement(\"SELECT count(*) FROM \" + getTableName() + \" WHERE \" + getNomeCampoChave(getTipoClasse()) + \" = ?\");\n            setParametrosQuerySelect(stm, valor);\n            rs = stm.executeQuery();\n            if (rs.next()) {\n                count = rs.getLong(1);\n                if (count > 1) {\n                    throw new MaisDeUmRegistroException(\"ENCONTRADO MAIS DE UM REGISTRO DE \" + getTableName());\n                }\n            }\n\n            return count;\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            closeConnection(connection, stm, rs);\n        }\n        return count;\n    }\n\n    protected void closeConnection(Connection connection, PreparedStatement stm, ResultSet rs) {\n        try {\n            if (rs != null && !rs.isClosed()) {\n                rs.close();\n            }\n            if (stm != null && !stm.isClosed()) {\n                stm.close();\n            }\n            if (connection != null && !connection.isClosed()) {\n                connection.close();\n            }\n        } catch (SQLException e1) {\n            // TODO Auto-generated catch block\n            e1.printStackTrace();\n        }\n    }\n\n    private String getTableName() throws TableException {\n        if (getTipoClasse().isAnnotationPresent(Tabela.class)) {\n            Tabela table = getTipoClasse().getAnnotation(Tabela.class);\n            return table.value();\n        }else {\n            throw new TableException(\"TABELA NO TIPO \" + getTipoClasse().getName() + \" NÃO FOI ENCONTRADA\");\n        }\n    }\n\n    @Override\n    public Collection<T> buscarTodos() throws DAOException {\n        List<T> list = new ArrayList<>();\n        Connection connection = null;\n        PreparedStatement stm = null;\n        ResultSet rs = null;\n        try {\n\n            connection = getConnection();\n            stm = connection.prepareStatement(\"SELECT * FROM \" + getTableName());\n            rs = stm.executeQuery();\n            while (rs.next()) {\n                T entity = getTipoClasse().getConstructor(null).newInstance(null);\n                Field[] fields = entity.getClass().getDeclaredFields();\n                for (Field field : fields) {\n                    if (field.isAnnotationPresent(ColunaTabela.class)) {\n                        ColunaTabela coluna = field.getAnnotation(ColunaTabela.class);\n                        String dbName = coluna.dbName();\n                        String javaSetName = coluna.setJavaName();\n                        Class<?> classField = field.getType();\n                        try {\n                            Method method = entity.getClass().getMethod(javaSetName, classField);\n                            setValueByType(entity, method, classField, rs, dbName);\n\n                        } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {\n                            throw new DAOException(\"ERRO LISTANDO OBJETOS \", e);\n                        } catch (TipoElementoNaoConhecidoException e) {\n                            throw new DAOException(\"ERRO LISTANDO OBJETOS \", e);\n                        }\n                    }\n                }\n                list.add(entity);\n\n            }\n\n        } catch (SQLException | InstantiationException | IllegalAccessException | IllegalArgumentException | InvocationTargetException | NoSuchMethodException | SecurityException | TableException e) {\n            throw new DAOException(\"ERRO LISTANDO OBJETOS \", e);\n        } finally {\n            closeConnection(connection, stm, rs);\n        }\n        return list;\n    }\n\n    protected Connection getConnection() throws DAOException {\n        try {\n            return ConnectionFactory.getConnection();\n        } catch (SQLException e) {\n            throw new DAOException(\"ERRO ABRINDO CONEXAO COM O BANCO DE DADOS \", e);\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/br/com/lnohara/mod30/dao/generic/GenericDAO.java b/src/br/com/lnohara/mod30/dao/generic/GenericDAO.java
--- a/src/br/com/lnohara/mod30/dao/generic/GenericDAO.java	(revision ea65dde582895610cb63e742f44121c4d351a6ba)
+++ b/src/br/com/lnohara/mod30/dao/generic/GenericDAO.java	(date 1667779874561)
@@ -92,7 +92,7 @@
                 }
                 return true;
             }
-
+z
         } catch (SQLException e) {
             throw new DAOException("ERRO CADASTRANDO OBJETO ", e);
         } finally {
@@ -121,7 +121,6 @@
 
     @Override
     public void alterar(T entity) throws TipoChaveNaoEncontradaException, DAOException {
-
         Connection connection = getConnection();
         PreparedStatement stm = null;
         try {
Index: testeUnitario/mod30/ClienteServiceTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package mod30;\n\nimport br.com.lnohara.mod30.dao.interfaces.IClienteDAO;\nimport br.com.lnohara.mod30.domain.Cliente;\nimport br.com.lnohara.mod30.exceptions.DAOException;\nimport br.com.lnohara.mod30.exceptions.TipoChaveNaoEncontradaException;\nimport br.com.lnohara.mod30.services.ClienteService;\nimport br.com.lnohara.mod30.services.IClienteService;\nimport mod30.dao.ClienteDaoMock;\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\n\n\npublic class ClienteServiceTest {\n\n    private IClienteService clienteService;\n\n    private Cliente cliente;\n\n    public ClienteServiceTest() {\n        IClienteDAO dao = new ClienteDaoMock();\n        clienteService = new ClienteService(dao);\n    }\n\n    @Before\n    public void init() {\n        cliente = new Cliente();\n        cliente.setCpf(12312312312L);\n        cliente.setNome(\"Rodrigo\");\n        cliente.setCidade(\"São Paulo\");\n        cliente.setEnd(\"End\");\n        cliente.setEstado(\"SP\");\n        cliente.setNumero(10);\n        cliente.setTel(1199999999L);\n\n    }\n\n    @Test\n    public void pesquisarCliente() throws DAOException {\n        Cliente clienteConsultado = clienteService.buscarPorCPF(cliente.getCpf());\n        Assert.assertNotNull(clienteConsultado);\n    }\n\n    @Test\n    public void salvarCliente() throws TipoChaveNaoEncontradaException, DAOException {\n        Boolean retorno = clienteService.cadastrar(cliente);\n\n        Assert.assertTrue(retorno);\n    }\n\n    @Test\n    public void excluirCliente() throws DAOException {\n        clienteService.excluir(cliente.getCpf());\n    }\n\n    @Test\n    public void alterarCliente() throws TipoChaveNaoEncontradaException, DAOException {\n        cliente.setNome(\"Rodrigo Pires\");\n        clienteService.alterar(cliente);\n\n        Assert.assertEquals(\"Rodrigo Pires\", cliente.getNome());\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/testeUnitario/mod30/ClienteServiceTest.java b/testeUnitario/mod30/ClienteServiceTest.java
--- a/testeUnitario/mod30/ClienteServiceTest.java	(revision ea65dde582895610cb63e742f44121c4d351a6ba)
+++ b/testeUnitario/mod30/ClienteServiceTest.java	(date 1667779874557)
@@ -33,7 +33,7 @@
         cliente.setEstado("SP");
         cliente.setNumero(10);
         cliente.setTel(1199999999L);
-
+        cliente.setGenero("M");
     }
 
     @Test
@@ -56,9 +56,11 @@
 
     @Test
     public void alterarCliente() throws TipoChaveNaoEncontradaException, DAOException {
-        cliente.setNome("Rodrigo Pires");
+        cliente.setNome("Rafaela Pires");
+        cliente.setGenero("F");
         clienteService.alterar(cliente);
 
-        Assert.assertEquals("Rodrigo Pires", cliente.getNome());
+        Assert.assertEquals("Rafaela Pires", cliente.getNome());
+        Assert.assertEquals("F", cliente.getGenero());
     }
 }
\ No newline at end of file
Index: src/br/com/lnohara/mod30/domain/Cliente.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package br.com.lnohara.mod30.domain;\n\nimport br.com.lnohara.mod30.anotacao.ColunaTabela;\nimport br.com.lnohara.mod30.anotacao.Tabela;\nimport br.com.lnohara.mod30.anotacao.TipoChave;\nimport br.com.lnohara.mod30.dao.interfaces.Persistente;\n\n@Tabela(\"TB_CLIENTE\")\npublic class Cliente implements Persistente {\n\n    @ColunaTabela(dbName = \"id\", setJavaName = \"setId\")\n    private Long id;\n\n    @ColunaTabela(dbName = \"nome\", setJavaName = \"setNome\")\n    private String nome;\n\n    @TipoChave(\"getCpf\")\n    @ColunaTabela(dbName = \"cpf\", setJavaName = \"setCpf\")\n    private Long cpf;\n\n    @ColunaTabela(dbName = \"tel\", setJavaName = \"setTel\")\n    private Long tel;\n\n    @ColunaTabela(dbName = \"endereco\", setJavaName = \"setEnd\")\n    private String end;\n\n    @ColunaTabela(dbName = \"numero\", setJavaName = \"setNumero\")\n    private Integer numero;\n\n    @ColunaTabela(dbName = \"cidade\", setJavaName = \"setCidade\")\n    private String cidade;\n\n    @ColunaTabela(dbName = \"estado\", setJavaName = \"setEstado\")\n    private String estado;\n\n    public String getNome() {\n        return nome;\n    }\n    public void setNome(String nome) {\n        this.nome = nome;\n    }\n    public Long getCpf() {\n        return cpf;\n    }\n    public void setCpf(Long cpf) {\n        this.cpf = cpf;\n    }\n    public Long getTel() {\n        return tel;\n    }\n    public void setTel(Long tel) {\n        this.tel = tel;\n    }\n    public String getEnd() {\n        return end;\n    }\n    public void setEnd(String end) {\n        this.end = end;\n    }\n    public Integer getNumero() {\n        return numero;\n    }\n    public void setNumero(Integer numero) {\n        this.numero = numero;\n    }\n    public String getCidade() {\n        return cidade;\n    }\n    public void setCidade(String cidade) {\n        this.cidade = cidade;\n    }\n    public String getEstado() {\n        return estado;\n    }\n    public void setEstado(String estado) {\n        this.estado = estado;\n    }\n    public Long getId() {\n        return id;\n    }\n    public void setId(Long id) {\n        this.id = id;\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/br/com/lnohara/mod30/domain/Cliente.java b/src/br/com/lnohara/mod30/domain/Cliente.java
--- a/src/br/com/lnohara/mod30/domain/Cliente.java	(revision ea65dde582895610cb63e742f44121c4d351a6ba)
+++ b/src/br/com/lnohara/mod30/domain/Cliente.java	(date 1667779859425)
@@ -33,6 +33,10 @@
     @ColunaTabela(dbName = "estado", setJavaName = "setEstado")
     private String estado;
 
+    @ColunaTabela(dbName = "genero", setJavaName = "setGenero")
+    private String genero;
+
+
     public String getNome() {
         return nome;
     }
@@ -81,4 +85,6 @@
     public void setId(Long id) {
         this.id = id;
     }
+
+z
 }
\ No newline at end of file
